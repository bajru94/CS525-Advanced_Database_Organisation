The goal of assignment 2 is to implement a buffer manager. This buffer manager manages a fixed number of pages in memory. The buffer pool combines page frames that stores pages from the file together with the page file. Several replacement strategies are implemented. 

How to run the codeï¼š
1. Go to project folder in terminal.
2. Use "make clean" command to remove old .o files in case compiled previously
3. Use "make" command to compile the program
   Use "./test_assign2_1" to run the test in "test_assign1_1.c" file
4. Use "make" command to compile the program
   Use "./test_assign2_2" to run the test in "test_assign1_1.c" file



Data Structures and Design:

typedef struct PageFrame {
    SM_PageHandle data;
	PageNumber pageNum;	//the page number in the pageFile.
	bool isDirty;		//the dirty bit of the frame
	int fixCount;		//the number of clients using this buffer
	int hitNum;		//for clock, shows whether this page is accessed or not
	int *LRU_array;		//for LRU, records the times of being accessed
} PageFrame;

int K;				//timestamp of LRU-K
int front, rear;		//front and rear of FIFO
int clock;			//clock
int globalHitCount;		//times of being accessed of all the pages
int writeCnt, readCnt;		//total number of write/read done on the buffer pool.
bool *dirtyFlags;		//an array of dirtyflags of all the frames
int *fixCounts;			//an array of fixed count of all the frames
PageNumber *pageNums;		//the page number of the page in the pageFile


FIFO
FIFO replacement strategy
1. First, it checks to see if the page is in memory. If the page is found, return.
2. Find the first loaded frame to be replaced, by iterating it to find the frame with smallest load_time. 
3. If the frame to be replaced is dirty, we need to firstly write current content back to the disk, and then replace it with the desired page.

CLOCK
clock replacement strategy
1. First, it checks to see if the page is in memory. If the page is found, return.
2. If the page is not in memory, it looks for the first frame with a reference bit that is equal to 0, Along the way, it sets all the reference bits to zero.
3. If found then update the new frame. 

LRU_K
LRU_K replacement strategy
1. Go through all the pages to check if there's empty spot, if yes then return.
2. Go through all the pages and find the page with lowest Kth accessed time (least recently accessed), if found then update the new frame. 

LFU
LFU replacement strategy
1. Go through all the pages to check if there's empty spot, if yes then return.
2. go through all the pages and find the page with lowest hitNum (least frequently used), in case of a tie, choose the one which was least recently accessed, update the new frame. 

initBufferPool
1. Initialized a buffer pool. We used an array to store the BM frames. 
2. Allocate memory and zero initialize everything. 

shutdownBufferPool
1. If buffer pool not exist, return error. 
2. Free the memory used by the given buffer pool.
3. If trying to shut down while there are pinned pages, return error. 
4. Write back dirty pages before shutting down.

forceFlushPool
1. Check all the frames in the buffer pool. If a frame has a dirty page and is unpinned, write it back to the file.

markDirty 
1. Find the frame caching the page.
2. if found, mark

unpinPage
1. Find the frame caching the page.
2. if found, decrementing its fix_count.

forcePage
1. Get the framenum caching this page.
2. Write the frame's contents back to the disk file. 

pinPage
1. If page not exist or page number < 0, return error. 
2. check if the page already exists, if so, increment its fixCount and update the hitNum.
3. If not, read the pageFile with different strategies. 

getFrameContents 
1. Iterate all the frames, then return the result

getDirtyFlags
1. Iterate all the frames, update the value of dirty flags, then return result.

getFixCounts
1. Iterate all the frames, update the value of fix count, then return result.

getNumReadIO 
1. Directly return the readCnt stored in the frame.

getNumWriteIO
1. Directly return the writeCnt stored in the frame.